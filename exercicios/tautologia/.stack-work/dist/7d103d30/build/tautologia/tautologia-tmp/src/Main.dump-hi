
==================== FINAL INTERFACE ====================
2018-07-24 19:45:25.129029 UTC

interface main:Main 8043
  interface hash: 168428b91a7e396de7a342d6f0a4b1e9
  ABI hash: 509787a93fad76861a728b4a63481556
  export-list hash: b3a34a08f344bb8ab9e0caa95b47a067
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5829bcda2343bd4a3c70f7c0bf6d3a6b
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.avalia
  Main.bools
  Main.find'
  Main.isTaut
  Main.main
  Main.p1
  Main.p2
  Main.p3
  Main.p4
  Main.substs
  Main.uniquevars
  Main.vars
  Main.Assoc
  Main.Prop{Main.And Main.Const Main.Imply Main.Not Main.Var}
  Main.Subst
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.Foldable 6cf3e918f22d03c0870804f05cd183d1
import  -/  base-4.11.1.0:Data.List cb78ca5eace70fd310936fda86b3e611
import  -/  base-4.11.1.0:Data.OldList 3987872d5de68d40c22cd1c30825ad08
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:GHC.List 95910b50fba2204d1a3364fe070ebf2b
import  -/  base-4.11.1.0:GHC.Num 5de8df0185e7e8d8ec29b3c61e2c8606
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  base-4.11.1.0:System.IO 7331ec6891ba7763ad75720258619382
import  -/  ghc-prim-0.5.2.0:GHC.Classes f7d67fd97d5a20e9252c9597d1aa387b
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
cbede6c77dbf4f9a3f6c5c03d1cd1d27
  $tc'And :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15440734804571935961##
                   16793707224506235197##
                   Main.$trModule
                   Main.$tc'And2
                   0#
                   Main.$tc'And1) -}
0984275c20efb62291a36b4f4993d9bc
  $tc'And1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e8b8006de20868d653bb1e054d05d964
  $tc'And2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'And3) -}
bef43a414612229b8740514ad2d24188
  $tc'And3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'And"#) -}
893d447c9729fa7a8d367be28a45755a
  $tc'Const :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16593906929829550721##
                   7887990552517801944##
                   Main.$trModule
                   Main.$tc'Const2
                   0#
                   Main.$tc'Const1) -}
5809859ecb1bc2aa7c6efe52252781f5
  $tc'Const1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
baaf285827b8d224fb960e42f73feb36
  $tc'Const2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Const3) -}
8614413619fc7341ef76f5e5466a692c
  $tc'Const3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Const"#) -}
dc4d598748aa2f90a4e748010e486a18
  $tc'Imply :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7984197813014496066##
                   13386950904653070150##
                   Main.$trModule
                   Main.$tc'Imply1
                   0#
                   Main.$tc'And1) -}
71d0cf2e094b4eddf2dfe5db332dcef3
  $tc'Imply1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Imply2) -}
7655e5cd1f2d651dc8a5fa6b01866144
  $tc'Imply2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Imply"#) -}
269ef948b9d37f4c55427f284703e235
  $tc'Not :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1320061673239159683##
                   1574256792985415566##
                   Main.$trModule
                   Main.$tc'Not2
                   0#
                   Main.$tc'Not1) -}
2d83a3fa698ff2a1251e3538709694b9
  $tc'Not1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3cae1bdda42beba60a9ef55f1461bb8c
  $tc'Not2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Not3) -}
92dcebface2991a34e92d23866874cf9
  $tc'Not3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Not"#) -}
cd8b3076f4582864e0c13f921212016b
  $tc'Var :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   941528533574368362##
                   2414828796846326931##
                   Main.$trModule
                   Main.$tc'Var2
                   0#
                   Main.$tc'Var1) -}
b13de3d25c8096b32cef08d2b01c396c
  $tc'Var1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d794eb41864ee6912ef8d9f366e17b3f
  $tc'Var2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Var3) -}
9d50a35c0b55e825dba255a913f262c0
  $tc'Var3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Var"#) -}
565ca8fed7745b186271dfec7a825dd4
  $tcProp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5185905648462801233##
                   3706247735825240864##
                   Main.$trModule
                   Main.$tcProp1
                   0#
                   GHC.Types.krep$*) -}
46fbfbb647034517711aca03e554f559
  $tcProp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcProp2) -}
8abd6cc7e399189ad139ebe12ef4c8a1
  $tcProp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Prop"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
336a95a96f36b0af0fb6535680f64a14
  $wbools :: GHC.Prim.Int# -> [[GHC.Types.Bool]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
95526fd0dff7468805f80e49182ff6ad
  type Assoc k v = [(k, v)]
9712d226d451d7c2f816f0eb5057c25d
  data Prop
    = Const GHC.Types.Bool
    | Var GHC.Types.Char
    | Not Main.Prop
    | And Main.Prop Main.Prop
    | Imply Main.Prop Main.Prop
6621e53e7e6e279dd2ed0da76a377dcb
  type Subst = Main.Assoc GHC.Types.Char GHC.Types.Bool
1835aba0f3a6bd80e7ad4f4068716f14
  avalia :: Main.Subst -> Main.Prop -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
49e5f6811fc772fb5179498a2476c7de
  bools :: GHC.Types.Int -> [[GHC.Types.Bool]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wbools ww1 }) -}
a9d990adc6d5bed6b55578ac05f3e40d
  find' :: GHC.Classes.Eq k => k -> Main.Assoc k v -> v
  {- Arity: 3, Strictness: <S(C(C(S))L),U(C(C1(U)),A)><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ k
                   @ v
                   ($dEq :: GHC.Classes.Eq k)
                   (k1 :: k)
                   (t :: Main.Assoc k v) ->
                 letrec {
                   go1 :: [(k, v)] -> v <join 1> {- Arity: 1 -}
                   = \ (ds :: [(k, v)]) ->
                     case ds of wild {
                       [] -> GHC.List.badHead @ v
                       : y ys
                       -> case y of wild1 { (,) k' v1 ->
                          case GHC.Classes.== @ k $dEq k1 k' of wild2 {
                            GHC.Types.False -> go1 ys GHC.Types.True -> v1 } } }
                 } in
                 go1 t) -}
06a970639fe99d6f0dd8dcc6232cc66d
  isTaut :: Main.Prop -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.isTaut1
                  `cast`
                (<Main.Prop>_R ->_R Data.Semigroup.Internal.N:All[0]) -}
0a858bf080f32bfcd4e2d2bb1d09dfd7
  isTaut1 :: Main.Prop -> Data.Semigroup.Internal.All
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (p :: Main.Prop) ->
                 letrec {
                   go1 :: [Main.Subst] -> Data.Semigroup.Internal.All
                     <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Main.Subst]) ->
                     case ds of wild {
                       []
                       -> GHC.Types.True `cast` (Sym (Data.Semigroup.Internal.N:All[0]))
                       : y ys
                       -> case Main.avalia y p of wild1 {
                            GHC.Types.False
                            -> GHC.Types.False `cast` (Sym (Data.Semigroup.Internal.N:All[0]))
                            GHC.Types.True -> go1 ys } }
                 } in
                 go1 (Main.substs p)) -}
3560f405736ad96b6728a7467c935988
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
642768339f3cd5ed9e64f6cd86fb609f
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main5
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main4
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main3
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv4 } } }) -}
72de06976bb93dc5ce7717793adfebfa
  main2 :: GHC.Base.String
  {- Unfolding: (case (Main.isTaut1 Main.p4)
                        `cast`
                      (Data.Semigroup.Internal.N:All[0]) of wild {
                   GHC.Types.False -> GHC.Show.$fShowBool4
                   GHC.Types.True -> GHC.Show.$fShowBool2 }) -}
8210a4b360b9c1e5864ded2c7dd26c4c
  main3 :: GHC.Base.String
  {- Unfolding: (case (Main.isTaut1 Main.p3)
                        `cast`
                      (Data.Semigroup.Internal.N:All[0]) of wild {
                   GHC.Types.False -> GHC.Show.$fShowBool4
                   GHC.Types.True -> GHC.Show.$fShowBool2 }) -}
8ad442aebe32177b9b896e4587f0527f
  main4 :: GHC.Base.String
  {- Unfolding: (case (Main.isTaut1 Main.p2)
                        `cast`
                      (Data.Semigroup.Internal.N:All[0]) of wild {
                   GHC.Types.False -> GHC.Show.$fShowBool4
                   GHC.Types.True -> GHC.Show.$fShowBool2 }) -}
abe451a6f35a550df46e880b687e56c3
  main5 :: GHC.Base.String
  {- Unfolding: (case (Main.isTaut1 Main.p1)
                        `cast`
                      (Data.Semigroup.Internal.N:All[0]) of wild {
                   GHC.Types.False -> GHC.Show.$fShowBool4
                   GHC.Types.True -> GHC.Show.$fShowBool2 }) -}
aff3ab5ce690525ac76d197ce3486b10
  main6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
7714f08cae16c607b4b5880791c5a4d1
  p1 :: Main.Prop
  {- HasNoCafRefs, Strictness: m4,
     Unfolding: (Main.And Main.p11 Main.p14) -}
33920d3712f503b6adfac56c70394326
  p10 :: Main.Prop
  {- HasNoCafRefs, Strictness: m5,
     Unfolding: (Main.Imply Main.p11 Main.p7) -}
0f4546e561fd3d3681dbdb9f57539a00
  p11 :: Main.Prop
  {- HasNoCafRefs, Strictness: m2, Unfolding: (Main.Var Main.p12) -}
a39fd15e57db2b10f7e61d1499c847fd
  p12 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'A'#) -}
00e3c00cd86d076e86b4aaffda4625fa
  p13 :: Main.Prop
  {- HasNoCafRefs, Strictness: m4,
     Unfolding: (Main.And Main.p11 Main.p7) -}
beceb6c6538ef2acb69da1bbac07b0f1
  p14 :: Main.Prop
  {- HasNoCafRefs, Strictness: m3, Unfolding: (Main.Not Main.p11) -}
a1a82fd0c1eef8482bf63adfd22df1f4
  p2 :: Main.Prop
  {- HasNoCafRefs, Strictness: m5,
     Unfolding: (Main.Imply Main.p13 Main.p11) -}
ef14fdc30cb892a41d8c9fc2b0a8373d
  p3 :: Main.Prop
  {- HasNoCafRefs, Strictness: m5,
     Unfolding: (Main.Imply Main.p11 Main.p13) -}
dc44bf055d90a77473597e061bcfcd59
  p4 :: Main.Prop
  {- HasNoCafRefs, Strictness: m5,
     Unfolding: (Main.Imply Main.p9 Main.p7) -}
2503c2dd7e29d3aeb37711d3eb296400
  p7 :: Main.Prop
  {- HasNoCafRefs, Strictness: m2, Unfolding: (Main.Var Main.p8) -}
7a2fd63daea03c70cdcd84b70677473c
  p8 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'B'#) -}
f1c24875a8bfa415c5c88eba396da16b
  p9 :: Main.Prop
  {- HasNoCafRefs, Strictness: m4,
     Unfolding: (Main.And Main.p11 Main.p10) -}
9a82f8428fea3868b3f33714457527b7
  substs :: Main.Prop -> [Main.Subst]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (p :: Main.Prop) ->
                 let {
                   y :: [GHC.Types.Char]
                   = Data.OldList.nubBy
                       @ GHC.Types.Char
                       GHC.Classes.eqChar
                       (Main.vars p)
                 } in
                 case GHC.List.$wlenAcc @ GHC.Types.Char y 0# of ww2 { DEFAULT ->
                 letrec {
                   go1 :: [[GHC.Types.Bool]] -> [Main.Subst]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [[GHC.Types.Bool]]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ Main.Subst
                       : y1 ys
                       -> GHC.Types.:
                            @ Main.Subst
                            (GHC.List.zip @ GHC.Types.Char @ GHC.Types.Bool y y1)
                            (go1 ys) }
                 } in
                 go1 (Main.$wbools ww2) }) -}
472dea68437dc7f00e733af1c9a29dab
  uniquevars :: Main.Prop -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (p :: Main.Prop) ->
                 Data.OldList.nubBy
                   @ GHC.Types.Char
                   GHC.Classes.eqChar
                   (Main.vars p)) -}
10841f3de05942e5fdcd1a762400b04f
  vars :: Main.Prop -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

